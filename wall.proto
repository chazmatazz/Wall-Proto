;; Wall swarming
;; proto -n 70 -c -DD hexgrid -T -l -sv "(wall (tup 150 210 270 300 360 420 480 570 630))"
;; fm
;; proto -n 70 -c -DD hexgrid -T -l -sv "(wall (tup 0 100 100 100 100 100 100 100 200))"
;;;;;;;;;;;;;;;; helper functions ;;;;;;;;;;;;;;;;

(def 4th (t) (elt t 3))

;; running sum
(def running-sum (s v) 
	(3rd 
		(rep state (tup 0 (- s 1) 0)
		(let* ((running-sum (1st state))
		  (running-idx (2nd state))
		  (last-sum (3rd state))
		  (next-running-idx (+ running-idx 1)))
		  (if (= next-running-idx s) (tup v 0 running-sum)
		  	(tup (+ v running-sum) next-running-idx last-sum))))))

(def transmit (radius) 
	(rep r 0 (max radius (max-hood+ (- (nbr r) 1)))))

(def normalize-angle (a) 
	(2nd (rect-to-polar (polar-to-rect (tup 1 a)))))
	
;;;;;;;;;;;;;;;; constants ;;;;;;;;;;;;;;

;; sonar thresholds
(def sonar-thresholds () (tup 50 150 250 400))

;;;;;;;;;;;;;; algorithms ;;;;;;;;;;;;;

;;;;;;;;;;;;;;; -> swarm ;;;;;;;;;;;;;;

;; swarm
;; 
;; swarming on 6-way communication
;;
;; ld: virtual distance between the nodes
;; d-t: time step for difference equation
;; acc: self-propelling force
;; gmma: viscosity
;; ka: negative spring constant
;; d: strength of anisotropy
;; cf: strength of interaction with neighbors
;; rc: optimum distance between agents
;; tau: relaxation time of heading dynamics
;;
;; proto expects spatial vectors to be 3d, so the virtual space is 3d
;;
(def swarm (is-reset init-state ld d-t acc gmma ka d cf rc tau)
	(rep state init-state
   	 		(if is-reset 
   	 			init-state 
   	 			(let* ((p (1st state))
   	 		  (v (2nd state))
   	 		  (hd (3rd state))
   	 		  (hd-norm-rect (polar-to-rect (tup 1 hd)))
   	 		  (hd-norm-rect-3d (tup (1st hd-norm-rect) (2nd hd-norm-rect) 0))
			  (self-propel-force (- (* acc hd-norm-rect-3d) (* gmma v)))
			  (interaction-force 
			  	(sum-hood 
			  		(let* ((dis 
			  				(- (+ (nbr p) (* ld (normalize (nbr-vec)))) p))
			  	    	   	(vlen-dis (vlen dis)))
			  	    	   	(if (< 0 vlen-dis)
			  			   		(let* ((alph 
			  			   				(+ 1 
			  			   				 (* d (/ (vdot dis hd-norm-rect-3d) vlen-dis))))
			  			   			(f (/ (* cf (- 1 (/ rc vlen-dis)) rc rc) 
			  			   				(* vlen-dis vlen-dis))))
			  			   			(* (/ alph vlen-dis) f dis))
			  			   		(tup 0 0 0)))))
			  (center-force (* ka p))
			  (force (+ self-propel-force interaction-force center-force))
			  (ds (if (< 0 (vlen v))
			  	(/ 
			  	 (vdot (normalize v) (tup (- 0 (2nd hd-norm-rect)) (1st hd-norm-rect) 0)) 
			  	 tau)
			  	 0))
			  (dv (* d-t force)))
			  (tup 
			  	(+ p v dv)
			  	(+ v dv)
			  	(normalize-angle (+ hd (* ds d-t))))))))

;; init state disordered
(def init-state-d ()
	(tup (tup 22 40 0) (tup 0.186 -4.8 0) 4.75))
	   	
;; init state synchronized (no use-sonar)
(def init-state-s ()
	(tup (tup 2.7 75.6 0) (tup 3.8 1.3 0) 0))
	   	
;; swarm-disordered
(def swarm-disordered (is-reset init-state) 
	(swarm is-reset init-state 20 0.01 20 1 1 1 100 25 0.1))

;; swarm-synchronized
(def swarm-synchronized (is-reset init-state) 
	(swarm is-reset init-state 20 0.01 20 5 0.1 0 100 20 1))

;; the actual algorithm used
(def sync-disorder (is-reset mod-sync-t end-t use-sonar s-3 h-300 h-1000)
	(let* ((s (swarm-synchronized is-reset (if use-sonar (init-state-d) (init-state-s))))
		   (d (swarm-disordered is-reset (init-state-d)))
		   (range-1 (1st (sonar-thresholds)))
		   (range-2 (2nd (sonar-thresholds)))
		   (range-3 (3rd (sonar-thresholds)))
		   (is-end (>= mod-sync-t (- end-t 15)))
		   (decay-time 
		   		(rep decay-time 0 (if is-reset 0 (if is-end (+ decay-time 0.05) 0))))
		   (amp (if is-end 
		   			(exp (* -0.4 decay-time)) 
		   			(min (rep amp 0 (if is-reset 0 (+ amp 0.005))) 1)))
		   (transmit-radius 
		   		(if (and (has-sonar) use-sonar (>= s-3 range-1) (< s-3 range-3)) 
		   			(if (< s-3 range-2) 4 2) 0))
		   (dist (rep d 0 (if is-reset 0 (if h-300 (transmit transmit-radius) d))))
		   (sync (and h-1000 (= dist 0))))
		   (* amp (cos (* (3rd (if sync s d)) 150)))))

(def avalanche (is-reset mod-sync-t s-2 h-300 h-1000)
	(let* ((d (swarm-disordered is-reset (init-state-d)))
		   (range-1 (1st (sonar-thresholds)))
		   (range-3 (3rd (sonar-thresholds)))
		   (transmit-radius 
		   		(if (and (has-sonar) (>= s-2 range-1) (< s-2 range-3)) (inf) 0))
		   (dist (rep d 0 (if is-reset 0 (if h-300 (transmit transmit-radius) d))))
		   (sync (and h-1000 (= dist 0))))
		   (if sync 
		   	(let ((a (cos (* (3rd d) 50)))) 
		   		(if (< (abs a) 0.999) 0 a))
		   	(cos (* (3rd d) 150)))))

;;;;;;;;;;;;;;;; -> rhythm ;;;;;;;;;;;;;

;; the pair of the port
(def pair-port (port) (mod (+ port 3) 6))

;; enumeration of possible message destinations
(def send-none () 0)
(def send-1-2-3 () 1)
(def send-1 () 2)
(def send-3 () 3)

;; is a port in the specified destination set
(def port-in-set (send-port send-set)
	(or (and (= send-set (send-1-2-3)) 
			(or (= send-port 1) (= send-port 2) (= send-port 3)))
		(and (= send-set (send-1)) (= send-port 1))
		(and (= send-set (send-3)) (= send-port 3))))

;; state is (send, x, y, a)
;; nbr-state is (x, y)

(def get-nbr-state (is-reset p-n state)
	(let* ((init-nbr-state (tup 0 0)))
		(rep nbr-state init-nbr-state (mux is-reset init-nbr-state 
			(mux (any-hood (and 
				(= p-n (port-number (nbr-angle)))
				(port-in-set (pair-port p-n) (1st (nbr state)))))
			(tup 
		 	(sum-hood (* (if (= p-n (port-number (nbr-angle))) 1 0) (2nd (nbr state))))
		 	(sum-hood (* (if (= p-n (port-number (nbr-angle))) 1 0) (3rd (nbr state)))))
			nbr-state)))))

(def rhythm (is-reset stp)
	(let* 
		((init-state (tup (send-none) (if (is-bottom-left) 39 22) 40 40))
		(state (rep state
		init-state
		(mux is-reset 
			init-state 
		   	(mux (is-bottom-left) 
		   		(let* ((y (3rd state))
		   			   (new-y (normalize-angle (+ y stp))))
		   			(tup (send-1-2-3) (- y 1) new-y y))
		   		(let* ((nbr-state-4 (get-nbr-state is-reset 4 state))
		   			   (nbr-state-5 (get-nbr-state is-reset 5 state))
		   			   (nbr-state-0 (get-nbr-state is-reset 0 state)))
		   			   (mux (not (= 0 (1st nbr-state-5)))
		   			   		(let ((nbr-y (2nd nbr-state-5)))
		   			   			(tup (send-1-2-3) (- nbr-y 1) nbr-y nbr-y))
		   			   			(mux (not (= 0 (1st nbr-state-0)))
		   			   				(let ((nbr-x (1st nbr-state-0))) 
		   			   					(tup (send-1) (- nbr-x 1) (3rd state) nbr-x))
		   			   				(mux (not (= 0 (1st nbr-state-4))) 
		   			   				(let ((nbr-x (1st nbr-state-4)))
		   			   					(tup (send-3) (- nbr-x 1) (3rd state) nbr-x))
					   				(tup (send-none) (2nd state) (3rd state) 0))))))))))
	(sin (4th state))))
		
;; frequency modulation
(def fm (is-reset mod-sync-t)
	(rhythm is-reset (+ 0.6 (* 0.4 (cos (* mod-sync-t (/ (* 2 (pi)) 30)))))))

;; amplitude modulation
(def am (is-reset mod-sync-t) 
	(let ((sin-t (sin (* mod-sync-t (/ (* 2 (pi)) 30)))))
		(* (max 0.1 (* sin-t sin-t)) (rhythm is-reset 0.6))))


;;;;;;;;;;;;;;;; -> other algorithms ;;;;;;;;;;;;;;;;

(def column (is-reset mod-sync-t s-2)
	(let* ((range-1 (1st (sonar-thresholds)))
		   (range-3 (3rd (sonar-thresholds)))
		   (is-audience (and (has-sonar) (>= s-2 range-1) (<= s-2 range-3)))
		   (recv-b (any-hood (and (= 3 (port-number (nbr-angle))) (nbr is-audience))))
		   (tim-1 (rep tim-1 0 (if is-reset 0 (+ tim-1 1))))
		   (tim-2 (rep tim-2 20 (if is-reset 20 (max 20 (if recv-b 0 (+ tim-2 0.1)))))))
		   (* (exp (neg tim-2)) (sin tim-1))))
		   

(def plane-wave (is-reset mod-sync-t s-2) 
	(let* ((range-2 (2nd (sonar-thresholds)))
		   (range-3 (3rd (sonar-thresholds)))
		   (is-audience (and (has-sonar) (>= s-2 range-2) (<= s-2 range-3)))) 0))

;;;;;;;;;;;; main function ;;;;;;;;;;;;;;;

;; wall
;;
;; cycles through multiple programs
;; ts: tuple of cycle times (length 9)
(def wall (ts) 
	(let* ((cycle-length (elt ts (- (len ts) 1)))
		   (mod-t 
		   	(rep t 0 
		   		(let ((new-t (+ t (dt)))) 
		   			(if (< cycle-length new-t) (- new-t cycle-length) new-t))))
		  (h-300 (heartbeat 0.3 mod-t cycle-length))
		  (h-1000 (heartbeat 1 mod-t cycle-length))
	      (mod-sync-t mod-t)
		  (s-2 (if (has-sonar) (running-sum 2 (sonar-value)) 0))
		  (s-3 (if (has-sonar) (running-sum 3 (sonar-value)) 0))
		  (servo-disabled (polar-to-rect (tup 2 (neg (/ (pi) 2))))))
		(if (> (elt ts 0) mod-sync-t) 
			(servo-pos 0 (+ (/ (pi) 2) 
				(sync-disorder 
					(> 5 mod-sync-t) mod-sync-t (elt ts 1) #f s-3 h-300 h-1000)))
		(if (> (elt ts 1) mod-sync-t) 
			(servo-pos 0 (+ (/ (pi) 4) 
				(fm (> 5 (- mod-sync-t (elt ts 0))) mod-sync-t)))
		(if (> (elt ts 2) mod-sync-t) 
			(servo-pos 0 (+ (/ (pi) 2) 
				(am (> 5 (- mod-sync-t (elt ts 1))) mod-sync-t)))
		(if (> (elt ts 3) mod-sync-t) 
			servo-disabled
		(if (> (elt ts 4) mod-sync-t) 
			(servo-pos 0 (+ (* (pi) (/ 75 180)) 
				(sync-disorder (> 5 (- mod-sync-t (elt ts 3))) 
					mod-sync-t (elt ts 5) #t s-3 h-300 h-1000)))
		(if (> (elt ts 5) mod-sync-t) 
			(servo-pos 0 (+ (/ (pi) 2)
				(column (> 5 (- mod-sync-t (elt ts 4))) mod-sync-t s-2)))
		(if (> (elt ts 6) mod-sync-t)
			(servo-pos 0 (+ (/ (pi) 2) 
				(plane-wave (> 5 (- mod-sync-t (elt ts 5))) mod-sync-t s-2)))
		(if (> (elt ts 7) mod-sync-t) 
			(servo-pos 0 (+ (/ (pi) 2) 
				(avalanche (> 5 (- mod-sync-t (elt ts 6))) mod-sync-t s-2 h-300 h-1000)))
		servo-disabled))))))))))